//BUG: If streaming test is stopped manually, stopAll() is called twice
//BUG: Stream tests for second data center fail - stream is running ok with correct path
//TODO: Implement Adobe's Netstream.info() call against the SWF object (videoLossRate, droppedFrames, videoBytesPerSecond)
// or Netstream.currentFPS

// Global constants
const streamingTime = 30000; // how long to run each video stream (30 seconds)
const streamDelay = 1000; // how between starting stream and showing in player + how long between stream type switches
const rotatingPlane = '<div class="sk-rotating-plane"></div>'; // cool CSS effect
const errorIcon = '<i class="fas fa-exclamation-triangle"></i>'; // triangle
const streamTypes = ['rtmp', 'rtmpt', 'rtmps']; //TODO: implement

// Global variables
let testResults = { // Retains results for easy download, uses -1 as unknown value
    connectionInfo: {},
    dataCenters: [
        {
            name: 'Boston',
            code: 'bos',
            streamer: 'wakefield-streaming2',
            latency: -1,
            jitter: -1,
            download: -1,
            rtmp: -1,
            rtmpt: -1,
            rtmps: -1
        },
        {
            name: 'Frankfurt',
            code: 'fra',
            streamer: 'fra-sts',
            latency: -1,
            jitter: -1,
            download: -1,
            rtmp: -1,
            rtmpt: -1,
            rtmps: -1
        },
        {
            name: 'Guadalajara',
            code: 'gdl',
            streamer: 'gdl-sts',
            latency: -1,
            jitter: -1,
            download: -1,
            rtmp: -1,
            rtmpt: -1,
            rtmps: -1
        },
        {
            name: 'London',
            code: 'lon',
            streamer: 'uk-streaming2',
            latency: -1,
            jitter: -1,
            download: -1,
            rtmp: -1,
            rtmpt: -1,
            rtmps: -1
        },
        {
            name: 'Phoenix',
            code: 'phx',
            streamer: 'phx-sts-2',
            latency: -1,
            jitter: -1,
            download: -1,
            rtmp: -1,
            rtmpt: -1,
            rtmps: -1
        },
        {
            name: 'Sydney',
            code: 'syd',
            streamer: 'syd-sts',
            latency: -1,
            jitter: -1,
            download: -1,
            rtmp: -1,
            rtmpt: -1,
            rtmps: -1
        },
        {
            name: 'Toronto',
            code: 'yyz',
            streamer: 'yyz-sts',
            latency: -1,
            jitter: -1,
            download: -1,
            rtmp: -1,
            rtmpt: -1,
            rtmps: -1
        }
    ]
};
let dataCenters = testResults.dataCenters;
let running = false; // tracks state of Start/Stop button
let player; // reference to JW Player 7 (initially set in DOM ready)
let speedTestWorker = null; // reference to web worker running speed tests
let speedTestWorkerTrigger; // enables canceling setInterval on speedTestWorker 
let selectedDataCenter = -1; // index of the array element in dataCenters for current tests
//TODO: Do I need an initial value of 'none'?
let streamType; // possible values: undefined | rmtp | rtmps | rtmpt
let streamPID; // process id for stream generated by PHP (used to stop stream)
let testNextStreamerTrigger = null; // enables clear timeout on textNextStreamer()
let testTypeRunning = 'None'; // possible values: None | Network | Streaming
let lastStreamingScore = 100; // retains results of last streaming test (continuously updated during run)
let streamActive = false; // is there an active stream being received?
let playerState = []; // array from player

// JQuery event handlers

// Start/Stop button handler
$('#startStop').on('click', function() {
    running = !running; // toggle
    // Visually alter start/stop button with FontAwesome classes, begin the test and log
    if(running) {
        start();
    } else {
        stopAll();
    }
});

$('#download').on('click', function() {
    let dataToDownload = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(testResults));
    downloadButton = $('#download');
    downloadButton.attr('href', dataToDownload);
    downloadButton.attr('download', 'Perfecto Connectivity Test Results.json');
});

// DOM ready handler
$(document).ready(function() {
    // Detect client's networking and populate fields
    $.getJSON('https://support.perfecto.io/php/ip-info.php', function(response) {
        // loop through returned attributes and write to fields with matching id
        for(let attribute in response) {
            $('#' + attribute).val(response[attribute]);
        }
        // Save to test results
        testResults.connectionInfo = response;
    });

    // Initialize the media player with sample video (required to initialize jwplayer)
    player = jwplayer('player').setup({ // Use JSON format because jwplayer docs recommend it
        'key': 'pAFx+xZh2QbZIfGG2QUSVdDSasRktc53eglFxQ854CpEKdIp',
        'primary': 'flash',
        'width': 383, // native: 1126
        'height': 829, // native: 2436
        'controls': false,
        'preload': 'none',
        'file': 'rtmp://wakefield-streaming2.perfectomobile.com/live/conTest',
        'image': 'phone.jpg',
        'logo': {
            'file': 'favicon-32x32.png'
        },
        'events': {
            onBufferChange: function(obj) {},
            onFirstFrame: function(obj) {}
        },
        'rtmp': {
            'bufferLength': 0,
         }
    });

    // Load custom video file on error
    player.on('error', function() {
        alert('Error occurred with JW Player.');
    });
});

// Write status near Start/Stop button and console log
function updateStatus(message) {
    $('#status').html(message);
    console.log(message);
};

// When Start is clicked, this is run every 100 ms to write results to page so user sees progress
function speedTestUpdate() {
    switch(testTypeRunning) {
        case 'Network':
            speedTestWorker.postMessage('status');
            break;
        case 'Streaming':
            if(streamActive) {
                playerState[player.getState()]++; // count number of times we are buffering during playback
                let tableCell = '#' + dataCenters[selectedDataCenter].code + '-' + streamType;
                if(player.getState() === 'error') {
                    streamActive = false;
                    $(tableCell).html(errorIcon);
                    updateStatus('Streaming test from ' + streamType.toUpperCase() + ' failed!');
                    clearTimeout(testNextStreamerTrigger);
                    testNextStreamer();
                } else {
                    let lastStreamingScore = Math.round(100 - (100 / (streamingTime / 100) * playerState['buffering']));
                    dataCenters[selectedDataCenter][streamType] = lastStreamingScore;
                }
            }
            break;
    }
}

// Invoked by newSpeedTestWorker() when message received. Split string and put values in appropriate fields.
function speedTestMessage(event) { 
    // Format for returned event.data:
    // status;download;upload;latency (speeds are in mbit/s) (status: 0=not started, 1=downloading, 2=uploading, 3=latency, 4=done, 5=aborted)
    let data = event.data.split(';');
    if (data[0] === '4') { // We are done with network tests...
        console.log('Finished ' + dataCenters[selectedDataCenter].name  + ' network tests.');
        speedTestWorker = null;
        qualifySpeedTestResults();
        setupStreaming(); // start streaming movie to streamers then begin testing
    } else if((data[0] >= 1) && (data[0] <= 3)) {
        let tableCellPrefix = '#' + dataCenters[selectedDataCenter].code;
        $(tableCellPrefix + '-download').html(data[1]);
        dataCenters[selectedDataCenter].download = data[1];
        $(tableCellPrefix + '-latency').html(data[3]);
        dataCenters[selectedDataCenter].latency = data[3];
        $(tableCellPrefix + '-jitter').html(data[5]);
        dataCenters[selectedDataCenter].jitter = data[5];
    }
}

// Create a worker to handle speed tests and call speedTestMessage() whenever there's a message
function newSpeedTestWorker() {
    speedTestWorker = new Worker('speedtest-worker.js');
    speedTestWorker.onmessage = speedTestMessage;
    return speedTestWorker;
}

// Use globals to keep track of data centers we tested. Pick up from where we left off.
function nextDataCenter() {
    if(selectedDataCenter + 1 < dataCenters.length) {
        selectedDataCenter++;
        let dataCenterCode = dataCenters[selectedDataCenter].code;
        let dataCenterName = dataCenters[selectedDataCenter].name;
        updateStatus('Running network tests to ' + dataCenterName + '...');
        speedTestWorker = newSpeedTestWorker();
        testTypeRunning = 'Network';
        speedTestWorker.postMessage('start {"test_order":"I_P_D", "url_dl": "https://' + dataCenterCode + '-lqt.perfectomobile.com/garbage.php", "url_ul": "https://' + dataCenterCode + '-lqt.perfectomobile.com/empty.php", "url_ping": "https://' + dataCenterCode + '-lqt.perfectomobile.com/empty.php", "url_telemetry": "https://' + dataCenterCode + '-lqt.perfectomobile.com/telemetry.php"} ');
        return true;
    } else // no more data centers to test
        return false;
}

// Start testing and invoke update() every 100ms to get status
function start() {
    console.log('Clicked Start.');
    $('#startStopIcon').removeClass('far fa-play-circle').addClass('far fa-stop-circle');
    speedTestWorkerTrigger = setInterval(speedTestUpdate, 100);
    nextDataCenter();
}

// Stop running tests but keep track of where we left off
function stopAll() {
    updateStatus('Stopping tests...');
    switch (testTypeRunning) {
        case 'Network':
            if(speedTestWorker) speedTestWorker.postMessage('abort');
            clearInterval(speedTestWorkerTrigger);
            updateStatus('Stopped active network test.');
            break;
        case 'Streaming':
            player.stop();
            $.get('https://support.perfecto.io/php/stream-controller.php?type=stop&pid=' + streamPID).done(function(response) {
                console.log('Stopped stream ' + streamPID);
                updateStatus('Stopped active streaming test.');
            });
            break;
        default: // should never happen
            updateStatus('No tests were running.');
    }
    testTypeRunning = 'None';
    $('#startStopIcon').removeClass('far fa-stop-circle').addClass('far fa-play-circle');
}

// Qualify whether the results are good, bad, meh, or error
function qualifyResult(id, bad, fair, greater, suffix) {
    let tableCell = $(id);
    let value = parseFloat(tableCell.html());
    if (value == -1) {
        tableCell.html(errorIcon);
    } else if (greater) {
        if (value > bad) {
            tableCell.html(value + suffix + ' <i class="far fa-thumbs-down"></i>');
        } else if (value > fair) {
            tableCell.html(value + suffix +' <i class="far fa-meh"></i>');
        } else {
            tableCell.html(value + suffix + ' <i class="far fa-thumbs-up"></i>');
        }
    } else {
        if (value < bad) {
            tableCell.html(value + suffix + ' <i class="far fa-thumbs-down"></i>');
        } else if (value < fair) {
            tableCell.html(value + suffix + ' <i class="far fa-meh"></i>');
        } else {
            tableCell.html(value + suffix + ' <i class="far fa-thumbs-up"></i>');
        }
    }
}

// Rate quality for completed network tests
function qualifySpeedTestResults() {
    let tableCellPrefix = '#' + dataCenters[selectedDataCenter].code;
    qualifyResult(tableCellPrefix + '-download', 0.5, 0.75, false, '');
    qualifyResult(tableCellPrefix + '-latency', 300, 150, true, '');
    qualifyResult(tableCellPrefix + '-jitter', 100, 50, true, '');
    console.log('Qualified speed test results');
}

// Begin running streaming tests
function streamTestActive() {
    streamActive = true;
    player.play();
    let dataCenterName = dataCenters[selectedDataCenter].name;
    updateStatus('Running ' + streamType.toUpperCase() + ' streaming test from ' + dataCenterName + '...');
    testNextStreamerTrigger = setTimeout(testNextStreamer, streamingTime);
}

function testNextStreamer() {
    streamActive = false;
    // Initialize array that will count number of times we are buffering (as well as other unused states)
    playerState['buffering'] = 0;
    playerState['idle'] = 0;
    playerState['playing'] = 0;
    playerState['paused'] = 0;

    if(!streamType) {
        streamType = 'rtmp'
    } else { // just finished one of the 3 streaming tests
        player.stop();
        updateStatus('Analyzing ' + dataCenters[selectedDataCenter].name + ' ' + streamType.toUpperCase() + ' streaming results...');
        let tableCell = '#' + dataCenters[selectedDataCenter].code + '-' + streamType;
        console.log('lastStreamingScore', lastStreamingScore);
        $(tableCell).html(lastStreamingScore);
        qualifyResult(tableCell, 85, 95, false, '%');

        //TODO: switch out to const array streamTypes with for/in loop instead of if/else
        if(streamType == 'rtmp')
            streamType = 'rtmpt';
        else if(streamType == 'rtmpt')
            streamType = 'rtmps';
        else { // done all types, next location
            $.get('https://support.perfecto.io/php/stream-controller.php?type=stop&pid=' + streamPID).done(function(response) {
                console.log('Stopped stream ' + streamPID);
                streamActive = false;
            });

            // If no more data centers, stop everything
            if (!nextDataCenter())
                stopAll(); //BUG: redundant $.get() from stopAll() when called from here
            return;
        }
    }

    let dataCenterName = dataCenters[selectedDataCenter].name;
    let dataCenterStreamer = dataCenters[selectedDataCenter].streamer;
//BUG: Might have to do a second setup on the player here
    player.file = streamType + '://' + dataCenterStreamer + '.perfectomobile.com/live/conTest';
    setTimeout(streamTestActive, streamDelay); // wait then call streamTestActive() to start another stream testing cycle
}

// Use PHP to invoke ffmpeg to start RTMP stream to target streamer to relay back to user
function setupStreaming() {
    testTypeRunning = 'Streaming';
    // Show rotating squares while we start streaming tests
    const tableCellPrefix = '#' + dataCenters[selectedDataCenter].code;
    $(tableCellPrefix + '-rtmp').html(rotatingPlane);
    $(tableCellPrefix + '-rtmpt').html(rotatingPlane);
    $(tableCellPrefix + '-rtmps').html(rotatingPlane);

    let streamer = dataCenters[selectedDataCenter].streamer;
    let dataCenterName = dataCenters[selectedDataCenter].name;

    $.get('https://support.perfecto.io/php/stream-controller.php?type=start&sts=' + streamer).done(function(response) {
        updateStatus('Starting stream from ' + dataCenterName + '...');
        streamPID = response;
        console.log('Started stream ' + streamPID);
        streamType = undefined; // tells testNextStreamer we're running the first test (rtmp)
        // Wait 3 seconds for the stream to start then begin streaming tests
        setTimeout(testNextStreamer, streamDelay);
    });
}