// Global constants
const streamingTime = 30000; // how long to run each video stream (30 seconds)
const dataCenters = [
    {
        name: 'Boston',
        code: 'bos',
        streamer: 'wakefield-streaming2'
    },
    {
        name: 'Frankfurt',
        code: 'fra',
        streamer: 'fra-sts'
    },
    {
        name: 'Guadalajara',
        code: 'gdl',
        streamer: 'gdl-sts'
    },
    {
        name: 'London',
        code: 'lon',
        streamer: 'uk-streaming2'
    },
    {
        name: 'Phoenix',
        code: 'phx',
        streamer: 'phx-sts-2'
    },
    {
        name: 'Sydney',
        code: 'syd',
        streamer: 'syd-sts'
    },
    {
        name: 'Toronto',
        code: 'yyz',
        streamer: 'yyz-sts'
    }
];

// Global variables
let running = false; // tracks state of Start/Stop button
let player; // reference to JW Player 7 (initially set in DOM ready)
let speedTestWorker = null; // reference to web worker running speed tests
let speedTestWorkerTrigger; // enables canceling setInterval on speedTestWorker 
let selectedDataCenter = -1; // index of the array element in dataCenters for current tests
//TODO: Do I need an initial value of 'none'?
let streamType = 'none'; // possible values: rmtp | rtmps | rtmpt
let streamPID; // process id for stream generated by PHP (used to stop stream)
let testNextStreamerTrigger = null; // enables clear timeout on textNextStreamer()
let testTypeRunning = 'None'; // possible values: None | Network | Streaming

// JQuery event handlers

// Start/Stop button handler
$('#startStop').on('click', function() {
    running = !running; // toggle
    // Visually alter start/stop button with FontAwesome classes, begin the test and log
    if(running) {
        $('#startStopIcon').removeClass('far fa-play-circle').addClass('far fa-stop-circle');
        console.log('Clicked Start.');
        start();
    } else {
        $('#startStopIcon').removeClass('far fa-stop-circle').addClass('far fa-play-circle');
        console.log('Clicked Stop.');
        stopAll();
    }
});

// DOM ready handler
$(document).ready(function() {
    // Detect client's networking and populate fields
    $.getJSON('https://support.perfecto.io/php/ip-info.php', function(response) {
        var location = response.city + ', ' + response.region + ' (' + response.country + ')';
        $('#ip').val(response.ip);
        $('#proxy').val(response.proxy);
        $('#location').val(location);
        $('#isp').val(response.isp);
        $('#tz').val(response.timezone);
    });

    // Initialize the media player with sample video (required to initialize jwplayer)
    player = jwplayer('mediaspace').setup({ // Use JSON format because jwplayer docs recommend it
        'image': 'perfecto-p.svg',
        'width': 480, // 16
        'height': 270, // 9
        'preload': 'none',
        'file': 'https://content.jwplatform.com/videos/ld5esXSv-5lUteR9r.mp4'
    });
    //player.key = "k/WD83HHK6xlWeRUuyRM+5fHBxfSCgwUUC7e++bhF5Urqx59"; // V8 (future non-RTMP use)
    player.key = 'pAFx+xZh2QbZIfGG2QUSVdDSasRktc53eglFxQ854CpEKdIp'; // V7
});

//TODO: Why not eliminate this and use testTypeRunning instead?
var streamTesting = 'none'; // possible values: none | init | active | error | abort (if on line 108)
var state = [];

// Write status near Start/Stop button and console log
function updateStatus(message) {
    $('#status').html(message);
    console.log(message);
};

// When Start is clicked, this is run every 100 ms to write results to page so user sees progress
function speedTestUpdate() {
    if (testTypeRunning === 'Network') // speedtest is active
        speedTestWorker.postMessage('status');
    else if (streamTesting == 'active') {
        state[player.getState()]++;
        var tableCell = '#' + dataCenters[selectedDataCenter].code + '-' + streamType;
        if (player.getState() === 'error') {
            streamTesting = 'abort';
            // testTypeRunning = 'None';
//TODO: write a symbol to cell instead of -1
            $(tableCell).html('-1');
            updateStatus('Streaming tests for ' + streamType + ' failed!');
            clearTimeout(testNextStreamerTrigger);
            testNextStreamer();
        } else {
            $(tableCell).html(Math.round(100 - (100 / (streamingTime / 100) * state['buffering'])));
        }
    }
}

// Invoked by newSpeedTestWorker() when message received. Split string and put values in appropriate fields.
function speedTestMessage(event) { 
    // Format for returned event.data:
    // status;download;upload;ping (speeds are in mbit/s) (status: 0=not started, 1=downloading, 2=uploading, 3=ping, 4=done, 5=aborted)
    let data = event.data.split(';');
    if (data[0] === '4') {
        console.log('Finished network tests.');
        speedTestWorker = null;
        qualifySpeedTestResults();
        updateStatus('Running streaming tests...')
        testTypeRunning = 'Streaming';
        streamTest();
    } else if((data[0] >= 1) && (data[0] <= 3)) {
        let tableCellPrefix = '#' + dataCenters[selectedDataCenter].code;
        $(tableCellPrefix + '-download').html(data[1]);
        $(tableCellPrefix + '-ping').html(data[3]);
        $(tableCellPrefix + '-jitter').html(data[5]);
    }
}

// Create a worker to handle speed tests and call speedTestMessage() whenever there's a message
function newSpeedTestWorker() {
    speedTestWorker = new Worker('speedtest-worker.js');
    speedTestWorker.onmessage = speedTestMessage;
    return speedTestWorker;
}

// Use globals to keep track of data centers we tested. Pick up from where we left off.
function nextDataCenter() {
    if(selectedDataCenter + 1 < dataCenters.length) {
        selectedDataCenter++;
        let dataCenterCode = dataCenters[selectedDataCenter].code;
        let dataCenterName = dataCenters[selectedDataCenter].name;
        updateStatus('Running network tests to ' + dataCenterName + '...');
        speedTestWorker = newSpeedTestWorker();
        testTypeRunning = 'Network';
        speedTestWorker.postMessage('start {"test_order":"I_P_D", "url_dl": "https://' + dataCenterCode + '-lqt.perfectomobile.com/garbage.php", "url_ul": "https://' + dataCenterCode + '-lqt.perfectomobile.com/empty.php", "url_ping": "https://' + dataCenterCode + '-lqt.perfectomobile.com/empty.php", "url_telemetry": "https://' + dataCenterCode + '-lqt.perfectomobile.com/telemetry.php"} ');
        return true;
    } else // no more data centers to test
        return false;
}

// Start testing and invoke update() every 100ms to get status
function start() {
    console.log('Beginning network tests to each data center....')
    speedTestWorkerTrigger = setInterval(speedTestUpdate, 100);
    nextDataCenter();
}

// Stop running tests but keep track of where we left off
function stopAll() {
    console.log('Stopping tests...');
    if(speedTestWorker) speedTestWorker.postMessage('abort');
    clearInterval(speedTestWorkerTrigger);
    testTypeRunning = 'None';
    updateStatus('Stopped.');
}

// Qualify whether the results are good, bad, meh, or error
function qualifyResult(id, bad, fair, greater, suffix) {
    let tableCell = $('#' + id);
    let value = parseFloat(tableCell.html());
    if (value == -1) {
        tableCell.html('<i class="fas fa-exclamation-triangle"></i>');
    } else if (greater) {
        if (value > bad) {
            tableCell.html(value + suffix + ' <i class="far fa-thumbs-down"></i>');
        } else if (value > fair) {
            tableCell.html(value + suffix +' <i class="far fa-meh"></i>');
        } else {
            tableCell.html(value + suffix + ' <i class="far fa-thumbs-up"></i>');
        }
    } else {
        if (value < bad) {
            tableCell.html(value + suffix + ' <i class="far fa-thumbs-down"></i>');
        } else if (value < fair) {
            tableCell.html(value + suffix + ' <i class="far fa-meh"></i>');
        } else {
            tableCell.html(value + suffix + ' <i class="far fa-thumbs-up"></i>');
        }
    }
}

// Rate quality for completed network tests
function qualifySpeedTestResults() {
    let tableCellPrefix = dataCenters[selectedDataCenter].code;
    qualifyResult(tableCellPrefix + '-download', 0.5, 0.75, false, '');
    qualifyResult(tableCellPrefix + '-ping', 300, 150, true, '');
    qualifyResult(tableCellPrefix + '-jitter', 100, 50, true, '');
}

// Begin running streaming tests
function streamTestActive() {
    streamTesting = 'active';
    //testTypeRunning = 'Streaming';
    let dataCenterName = dataCenters[selectedDataCenter].name;
    updateStatus('Running ' + streamType.toUpperCase() + ' streaming test from ' + dataCenterName + '...');
    testNextStreamerTrigger = setTimeout(testNextStreamer, streamingTime);
}

function testNextStreamer() {
    state['idle'] = 0;
    state['buffering'] = 0;
    state['playing'] = 0;
    state['paused'] = 0;
    streamTesting = 'init';
    //testTypeRunning = 'Streaming';

    if(streamType == 'none') {
        streamType = 'rtmp'
    } else {
        player.stop();
        player.remove();
        updateStatus('Finalizing ' + streamType.toUpperCase() + ' stream testing...');
        let tableCell = dataCenters[selectedDataCenter].code + '-' + streamType;
        qualifyResult(tableCell, 85, 95, false, '%');
        qualifySpeedTestResults();

        if(streamType == 'rtmp')
            streamType = 'rtmpt';
        else if(streamType == 'rtmpt')
            streamType = 'rtmps';
        else { // done all types, next location
            updateStatus('Stopping stream testing...');

            $.get('https://support.perfecto.io/php/stream-controller.php?type=stop&pid=' + streamPID).done(function(response) {
                console.log('Stopped stream ' + streamPID);
            });

            streamTesting = 'none';
            //testTypeRunning = 'None';
            if (!nextDataCenter())
                stopAll();
            return;
        }
    }

    testTypeRunning = 'Streaming';
    let dataCenterName = dataCenters[selectedDataCenter].name;
    let dataCenterStreamer = dataCenters[selectedDataCenter].streamer;
    updateStatus('Running ' + streamType.toUpperCase() + ' test from ' + dataCenterName + '...');
    player.setup({
        //flashplayer: 'jwv7/jwplayer.flash.swf',
        autostart: true,
        file: streamType + '://' + dataCenterStreamer + '.perfectomobile.com/live/conTest',
        //width: '320',
        //height: '240',
        rtmp: {
           bufferLength: 0,
        },
        events: {
            onBufferChange: function(obj) {},
            onFirstFrame: function(obj) {}
        }
    });
    setTimeout(streamTestActive, 4000);
}

function streamStarted() {
    //jwplayer.key = 'pAFx+xZh2QbZIfGG2QUSVdDSasRktc53eglFxQ854CpEKdIp'; // V7 (already setup earlier)
//TODO: Do I need to reinitialize jwplayer to switch from MPEG4 placeholder to Flash?
    player = jwplayer('mediaspace');
//TODO: Why set this to 'none' again?
    streamType = 'none';
    setTimeout(testNextStreamer, 3000);
    let dataCenterName = dataCenters[selectedDataCenter].name;
    updateStatus('Opening stream from ' + dataCenterName + '...');
}

function streamTest() {
    // Show progress while we start streaming tests
    const tableCellPrefix = '#' + dataCenters[selectedDataCenter].code;
    const rotatingPlane = '<div class="sk-rotating-plane"></div>'; // cool CSS effect
    $(tableCellPrefix + '-rtmp').html(rotatingPlane);
    $(tableCellPrefix + '-rtmpt').html(rotatingPlane);
    $(tableCellPrefix + '-rtmps').html(rotatingPlane);

    let streamer = dataCenters[selectedDataCenter].streamer;

    $.get('https://support.perfecto.io/php/stream-controller.php?type=start&sts=' + streamer).done(function(response) {
        console.log('Started stream ' + response + ' from ' + streamer);
        streamPID = response;
        streamStarted();
    });
    let dataCenterName = dataCenters[selectedDataCenter].name;
    updateStatus('Testing streaming from ' + dataCenterName + '...');
}